<?php

/*
 *   Implements hook_menu().
 */

function tickets_comment_menu() {
    $items['ticket/%/comment/delete/%/%'] = array(
      'description' => 'Page to delete selected comment.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tickets_comment_delete_form', 4),
      'access callback' => TRUE,
    );
    return $items;
}

/*
 *   Implements hook_form().
 */

function tickets_comment_form($form, &$form_state, $node) {

    $cid = arg(4);
    //drupal_set_message('arg(3):- ' . $cid);

    $role = $GLOBALS['role'];

    if ($cid == '' || $cid == 'edit-user') {
        //To create a new comment

        if ($role == 'anonymous user') {
            $url = '../../../user/login';
            drupal_goto($url, array('external' => TRUE));
        }
        //drupal_set_message('new comment');

        $form['new_comments'] = array(
          '#prefix' => '<h3>',
          '#markup' => 'Add new comment',
          '#suffix' => '</h3>',
            //'#weight' => ,
        );

        $form['comment_val'] = array(
          '#type' => 'hidden',
          '#value' => 'new comment',
        );

        $form['subject'] = array(
          '#type' => 'textfield',
          '#title' => t('Subject:'),
          '#value' => '',
          //'#weight' => 11,
          '#required' => TRUE,
        );

        $form['comment'] = array(
          '#type' => 'textarea',
          '#title' => t('Comment:'),
          '#value' => '',
            //'#weight' => 12,
        );

        $form['node'] = array(
          '#type' => 'hidden',
          //'#title' => t('Comment:'),
          '#value' => $node,
            //'#weight' => 12,
        );

        $_SESSION['node'] = $node;

        $form['post_comment'] = array(
          '#type' => 'submit',
          '#value' => 'POST',
            //'#weight' => 13,
        );
    }
    else if($cid!='edit-user'){
        //To update existing comment
        // drupal_set_message('existing comment');

        if ($role == 'anonymous user') {
            $url = '../../../../user/login';
            drupal_goto($url, array('external' => TRUE));
        }

        $comment = '';
        $subject = '';
        $result_existing = db_query("SELECT comment,subject from tickets_comment where cid='" . $cid . "'");
        foreach ($result_existing as $value) {
            $comment = $value->comment;
            $subject = $value->subject;
        }

        $form['new_comments'] = array(
          '#prefix' => '<h2>',
          '#markup' => 'Update exisiting comment',
          '#suffix' => '</h2>',
            //'#value' => 'new',
            //'#weight' => ,
        );

        $form['comment_val'] = array(
          '#type' => 'hidden',
          '#value' => 'existing comment',
        );

        $form['subject'] = array(
          '#type' => 'textfield',
          '#title' => t('Subject:'),
          '#value' => $subject,
          //'#weight' => 11,
          '#required' => TRUE,
        );

        $form['comment'] = array(
          '#type' => 'textarea',
          '#title' => t('Comment:'),
          '#value' => $comment,
            //'#weight' => 12,
        );

        $_SESSION['node'] = $node;

        $form['update_comment'] = array(
          '#type' => 'submit',
          '#value' => 'UPDATE',
            //'#weight' => 13,
        );
    }

    return $form;
    //}
}

function tickets_comment_form_validate($form, &$form_state) {
    //drupal_set_message($_POST['comment']);
    if ($_POST['subject'] == "") {
        //form_set_error('error',"Subject can't be empty");
        form_set_error('error', "Subject can't be empty");
    }
    if ($_POST['comment'] == "") {
        //form_set_error('error',"Subject can't be empty");
        form_set_error('error', "Comment can't be empty");
    }
}

function tickets_comment_form_submit() {

    $comment_val = $_POST['comment_val'];
    //drupal_set_message($comment_val);

    $pid = $_SESSION['pid'];
    $uid = $_SESSION['uid'];
    $nid = arg(3);
    $comment = $_POST['comment'];
    $subject = $_POST['subject'];
    $created = REQUEST_TIME;

    //  drupal_set_message('comment ' . $nid);
    //  drupal_set_message('comment ' . $uid);
    //  drupal_set_message('comment ' . $pid);


    if ($comment_val == 'new comment') {

        db_insert('tickets_comment')
            ->fields(array(
              'pid' => $pid,
              'nid' => $nid,
              'uid' => $uid,
              'subject' => $subject,
              'comment' => $comment,
              'created' => $created,
            ))
            ->execute();
        drupal_set_message('Comment has been created..!');
    }
    elseif ($comment_val == 'existing comment') {
        $cid = arg(4);
        db_update('tickets_comment')
            ->fields(array(
              'subject' => $subject,
              'comment' => $comment,
              'changed' => $created,
            ))
            ->condition('cid', $cid)
            ->execute();
        drupal_set_message('Comment has been updated..!');

        $url = '../../view-all/' . $nid . '/'.'?page='.$_GET['page'];
        drupal_goto($url, array('external' => TRUE));
    }
}

function tickets_comment_delete_form($form, &$form_state, $node) {

    $role = $GLOBALS['role'];
    if ($role == 'anonymous user') {
        $url = '../../user/login';
        drupal_goto($url, array('external' => TRUE));
    }

    drupal_set_message($_SESSION['pid']);
    //$_SESSION['']
    $db_pid = '';

    $get_pid = db_query("SELECT pid FROM tickets_comment WHERE nid='" . $node . "' and cid='" . arg(5) . "'");
    foreach ($get_pid as $value) {
        $db_pid = $value->pid;
    }

    // drupal_set_message('SESSION_pid:- '.$_SESSION['pid']);
    //drupal_set_message('db_pid:- '.$db_pid);

    if ($_SESSION['pid'] != $db_pid) {
        $url = '../../../view-all';
        //  drupal_set_message($url);
        drupal_goto($url, array('external' => TRUE));
    }

    $form['warn'] = array(
      '#markup' => '<div class="col-md-8"><h2>Are you sure you want to delete this comment?</h2>',
    );
    $form['warn_2'] = array(
      '#markup' => 'This action cannot be undone.<br/>',
    );
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => 'Delete',
    );
    $get_ra = arg(1);
    $form['cancel'] = array(
      '#prefix' => '&nbsp&nbsp',
      '#markup' => '' . l('Cancel', 'ticket/' . $get_ra . '/view-all/' . $node,array('query'=> array('page'=> $_GET['page']))),
      '#value' => 'cancel',
      '#suffix' => '</div>',
    );

    return $form;
}

function tickets_comment_delete_form_submit() {
    $nid = arg(4);
    $cid = arg(5);
    drupal_set_message('nid:- ' . $nid . '<br/>cid:- ' . $cid);


    db_query("DELETE FROM tickets_comment WHERE nid='" . $nid . "' and cid='" . $cid . "'");
    drupal_set_message('Comment Deleted');

    $url = '../../../view-all/' . $nid.'?page='.$_GET['page'];  
    drupal_goto($url, array('external' => TRUE));
}
