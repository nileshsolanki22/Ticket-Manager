<?php

/**
 * @file
 * tickets.module
 */

/**
 * Implements hook_user_login().
 */
function tickets_user_login(&$edit, $account) {

    $temp = $GLOBALS['user']->roles;
    foreach ($temp as $role) {
        //drupal_set_message($role);
        $user_role = $role;
    }

    if ($user_role == 'administrator') {
        $_GET['destination'] = 'project/select';
    }
    else {
        $_GET['destination'] = 'project/select';
    }
}

/**
 * Implements hook_init().
 */
function tickets_init() {
    global $user;
    global $role;
    //session_start();

    foreach ($user->roles as $role) {
        
    }
    $_SESSION["uid"] = $user->uid;
    $_SESSION["role"] = $role;
}

/**
 * Implements hook_menu().
 */
function tickets_menu() {
    //$items['examples/form-example'] = array( //this creates a URL that will call this form at "examples/form-example"
    $items['ticket/new-ticket'] = array(//this creates a URL that will call this form at "examples/form-example"  
      //'title' => 'Tickets', //page title
      'description' => 'A form to create tickets.',
      'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array('tickets_form', 1), //put the name of the form here
      // 'access arguments' => array('access administration pages'),
      'access callback' => TRUE,
    );

    $items['ticket/view/%node'] = array(
      //'title' => 'Tickets', //page title
      'description' => 'Page to  display selected ticket.',
      'page callback' => 'tickets_view', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array(2), //put the name of the form here
      // 'access arguments' => array('access administration pages'),
      //'type' => MENU_CALLBACK,
      'access callback' => TRUE,
    );

    $items['ticket/%/view-all'] = array(
      //'title' => 'Tickets', //page title
      'description' => 'Page to  display created tickets.',
      'page callback' => 'tickets_list', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      //'page arguments' => array('tickets_form'), //put the name of the form here
      // 'access arguments' => array('access administration pages'),
      'access callback' => TRUE,
    );


    $items['ticket/%/view-all/%node/edit/%'] = array(
      //'title' => 'Tickets', //page title
      'description' => 'Page to edit selected ticket.',
      'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array('tickets_form', 4), //put the name of the form here
      //'page callback' => 'tickets_list', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      //'page arguments' => array(4), //put the name of the form here        
      'access callback' => TRUE,
    );

    /*
      $items['ticket/%/view-all/%node/edit-user'] = array(
      //'title' => 'Tickets', //page title
      'description' => 'Page to edit selected ticket user.',
      //'page arguments' => array(2), //put the name of the form here
      'page callback' => 'people_edit', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array(4), //put the name of the form here
      'access callback' => TRUE,
      );
     */

    $items['project/new-project'] = array(
      //'title' => 'Tickets', //page title
      'description' => 'A form to create new project.',
      'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array('project_form'), //put the name of the form here
      // 'access arguments' => array('access administration pages'),
      'access callback' => TRUE,
    );

    $items['project/select-project'] = array(
      //'title' => 'Tickets', //page title
      'description' => 'A form to create new project.',
      'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array('project_select_form'), //put the name of the form here
      // 'access arguments' => array('access administration pages'),
      'access callback' => TRUE,
    );

    $items['project/add-users'] = array(
      //'title' => 'Tickets', //page title
      'description' => 'A form to add users to a project.',
      'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array('add_users_form'), //put the name of the form here
      // 'access arguments' => array('access administration pages'),
      'access callback' => TRUE,
    );

    $items['project/delete-user'] = array(
      //'title' => 'Tickets', //page title
      'description' => 'Page to delete users from project.',
      'page callback' => 'delete_user', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array(2), //put the name of the form here
      'type' => MENU_NORMAL_ITEM,
      'access callback' => TRUE,
    );

    $items['project/select'] = array(
      //'title' => 'Tickets', //page title
      'description' => 'Page to select project.',
      'page callback' => 'select_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      //'page arguments' => array('select_form'), //put the name of the form here
      'access callback' => TRUE,
    );

    $items['ticket/%/delete/%/%'] = array(
      //'title' => 'Tickets', //page title
      'description' => 'A form to delete a ticket.',
      'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array('tickets_delete_form', 1, 3), //put the name of the form here
      // 'access arguments' => array('access administration pages'),
      'access callback' => TRUE,
    );

    /*
     *  Autocomplete roles from role table
     */

    $items['role/autocomplete'] = array(
      'page callback' => 'tikcets_autocomplete',
      'access arguments' => array('access role autocomplete'),
      'type' => MENU_CALLBACK,
    );

    /*
     *  Autocomplete add users from user table
     */

    $items['users/autocomplete'] = array(
      'page callback' => 'users_autocomplete',
      'access arguments' => array('access users autocomplete'),
      //'page arguments' => array('',2),
      'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 *   Implements hook_form().
 */
function tickets_form($form, &$form_state, $arg) {

    $role = $GLOBALS['role'];
    if ($role == 'anonymous user') {
        $url = '../user/login';
        drupal_goto($url, array('external' => TRUE));
    }

    $user_name = $GLOBALS['user']->name;
    drupal_set_message('username : - ' . $user_name);

    $tid = '';
    $project_name = '';
    $project = '';
    $assignee = '';
    $reporter = '';
    $Issue_type = '';
    $summary = '';
    $description = '';
    $Priority = '';
    $attachment = '';


    //drupal_set_message("form:- " . arg(3));
    //drupal_set_message('ticket form :- '.arg(2));
    //To edit previously created ticket
    //if(is_numeric($arg1))
    //$nid = arg()

    if (is_numeric(arg(3))) {
        $nid = arg(3);
        $_SESSION['nid'] = $nid;
    }
    else if (isset($_SESSION['nid'])) {
        $nid = $_SESSION['nid'];
    }


    //To show ticket edit overlay form
    if ($arg == 'edit') {
        /*
          drupal_set_message('edit:- ' . $arg);

          if (arg(2) == 'attachment') {
          //$node_id =
          $nid = $_SESSION['nid'];
          drupal_set_message('attach:- ' . $nid);
          //return;
          }
          else if (is_numeric(arg(3))) {
          $nid = arg(3);
          drupal_set_message('attach:- ' . $nid);
          $_SESSION['nid'] = arg(3);
          //$node_id = $nid;
          }
          else {
          drupal_set_message('last');
          $nid = $_SESSION['nid'];
          }
         */

        $edit_ticket_query = "SELECT * FROM {tickets} WHERE nid ='" . $nid . "'";
        drupal_set_message($edit_ticket_query);
        $result = db_query($edit_ticket_query);

        foreach ($result as $record) {
            //$pid = $record->pid;
            //$project = $record->project;
            //_nid = $record->nid;
            $tid = $record->tid;
            $status = $record->ticket_status;
            $assignee = $record->assignee;
            $reporter = $record->reporter;
            $Issue_type = $record->issue_type;
            $summary = $record->summary;
            $description = $record->description;
            $attachment = $record->attachment;
            $Priority = $record->priority;
        }

        $pid = $_SESSION['pid'];
        $project = $_SESSION['project'];

        drupal_set_message('pid:- ' . $pid . ' project:- ' . $project);

        //drupal_set_message("db_nid (edit) :-" . $db_nid);
        drupal_set_message("pid (edit) :-" . $_SESSION['pid']);

        $result2 = db_query("SELECT name FROM project_users where pid ='" . $pid . "'");
        foreach ($result2 as $value) {
            $reporter_options[$value->name] = $value->name;
            $assignee_options[$value->name] = $value->name;
        }

        $db_pid = '';
        $get_pid = db_query("SELECT pid from tickets WHERE nid='" . $nid . "' and pid='" . $_SESSION['pid'] . "'");
        foreach ($get_pid as $value) {
            $db_pid = $value->pid;
        }

        drupal_set_message('$db_pid:- ' . $db_pid);
        if ($db_pid != $_SESSION['pid']) {
            $form['title'] = array(
              '#markup' => '',
            );
            return $form;
        }

        if ($project == "") {
            $url = '../project/select-project';
            drupal_goto($url, array('external' => TRUE));
        }

        $form['div_edit'] = [
            // '#markup' => '</div></div><div class ="col-md-12" style=" background-color:la1venderblush; " >',
        ];

        $form['project'] = array(
          '#type' => 'textfield',
          '#name' => 'project',
          '#title' => 'Project',
          '#default_value' => '',
          '#value' => $project,
          '#description' => '',
          '#weight' => 1,
          '#multiple' => $multiple = FALSE,
          '#required' => $required = TRUE,
          '#attributes' => array('readonly' => 'readonly'),
        );

        $issue_type = array("Bug" => "Bug", "Issue" => "Issue", "Ticket" => "Ticket");

        $form['issue_type'] = array(
          '#type' => 'select',
          '#name' => 'issue_type',
          '#title' => 'Issue Type',
          '#default_value' => '',
          '#options' => $issue_type,
          '#value' => $Issue_type,
          '#description' => '',
          '#weight' => 2,
          '#multiple' => $multiple = FALSE,
          '#required' => $required = TRUE,
            //'#default_value' => variable_get('issue_type', $form_state['issue_type']['type']),
        );

        $form['ticket_summary'] = array(
          '#type' => 'textfield',
          '#title' => t('Summary'),
          '#value' => $summary,
          '#size' => 60, '#maxlength' => 500,
          '#weight' => 3,
            //    '#required' => TRUE,
        );

        $form['reporter'] = array(
          '#type' => 'select',
          '#title' => t('Reporter'),
          '#options' => $reporter_options,
          '#default_value' => $reporter,
          '#weight' => 4,
          '#required' => TRUE,
        );

        $form['ticket_description'] = array(
          '#type' => 'textarea',
          '#title' => t('Description'),
          '#value' => $description,
          '#size' => 60, '#maxlength' => 10000,
          '#weight' => 5,
          '#required' => FALSE,
        );

        $priority = array("Low" => "Low", "Medium" => "Medium", "High" => "High");
        $form['priority'] = array(
          '#type' => 'select',
          '#name' => 'priority',
          '#title' => 'Priority',
          '#default_value' => '',
          '#options' => $priority,
          '#value' => $Priority,
          '#description' => '',
          '#weight' => 6,
          '#multiple' => $multiple = FALSE,
          '#required' => $required = TRUE,
        );

        if (!empty($attachment)) {
            $file_name = substr($attachment, 24);
            $link = '/drupal7/sites/default/files/files/tickets/' . $file_name;
            $form['attachment_prev'] = array(
              '#markup' => '<a href =' . "$link " . 'download>' . $file_name . '</a>',
              '#prefix' => '<br/><b>Previous Attachment:</b><br/>',
              '#name' => 'attachment_prev',
              '#weight' => 7,
            );
        }

        $form['assignee'] = array(
          '#type' => 'select',
          '#title' => t('Assignee'),
          '#options' => $assignee_options,
          '#default_value' => $assignee,
          '#weight' => 9,
          '#required' => TRUE,
        );

        $form['status_show'] = array(
          '#type' => 'hidden',
          //'#title' => t('Assignee'),
          '#value' => $status,
          '#weight' => 10,
            //'#required' => TRUE,
        );

        $form['update'] = array(
          '#type' => 'submit',
          '#value' => 'Update',
          '#weight' => 11,
        );

        $form['div_end'] = [
            //'#markup' => '<div>',
        ];


        /*
          $form['attachment'] = array(
          '#title' => t('Upload new file'),
          '#type' => 'managed_file',
          '#upload_validators' => array('file_validate_extensions' => array('jpeg jpg png gif zip txt doc docx xls xlsx pdf')),
          '#weight' => 8,
          '#upload_location' => 'public://files//' . 'tickets',
          );
         */
    }
    //TO create a new ticket
    else {
        if (arg(2) == 'attachment') {
            // When page is refreshed after uploading a attachment

            $project_name = $_POST['project'];
            $project_id = $_SESSION['pid'];

            //$_GET['id'];
        }
        else {
            $project_id = $_SESSION['pid'];
            // To get project name using pid\
            //drupal_goto($url, array('external' => TRUE));

            $get_project = db_query("SELECT project FROM project WHERE pid ='" . $project_id . "'");
            foreach ($get_project as $value) {
                $project_name = $value->project;
            }
        }

        if ($project_id == '') {
            drupal_get_messages('error');
            $url = '../project/select';
            drupal_goto($url, array('external' => TRUE));
        }

        $query = "select name,project from project_users where pid = " . "'" . $project_id . "'";
        //drupal_set_message($q);
        $result = db_query($query);

        foreach ($result as $value) {
            $reporter[$value->name] = $value->name;
            //  drupal_set_message($value->name);
            $assignee[$value->name] = $value->name;
            //drupal_set_message
        }

        //drupal_set_message($project_name);

        $div = '<div id="tickets-form" class = "col-md-12" >';
        $form['div_start'] = [
          '#markup' => $div,
        ];

        $form['project'] = array(
          '#type' => 'textfield',
          '#name' => 'project',
          '#title' => 'Project',
          '#value' => $project_name,
          '#weight' => 1,
          '#required' => TRUE,
          '#attributes' => array('readonly' => 'readonly'),
        );

        $issue_type = array("Bug" => "Bug", "Issue" => "Issue", "Ticket" => "Ticket");

        $form['issue_type'] = array(
          '#type' => 'select',
          '#name' => 'issue_type',
          '#title' => 'Issue Type',
          '#options' => $issue_type,
          '#weight' => 2,
          '#required' => TRUE,
        );

        $form['ticket_summary'] = array(
          '#type' => 'textfield',
          '#title' => t('Summary'),
          //'#value' => $Reporter, 
          '#weight' => 3,
          '#required' => TRUE,
        );

        $form['reporter'] = array(
          '#type' => 'select',
          '#title' => t('Reporter'),
          '#options' => $reporter,
          '#weight' => 4,
          '#multiple' => FALSE,
          '#required' => TRUE,
        );

        $form['ticket_description'] = array(
          '#type' => 'textarea',
          '#title' => t('Description'),
          '#weight' => 5,
          '#required' => FALSE,
        );

        $priority = array("Low" => "Low", "Medium" => "Medium", "High" => "High");
        $form['priority'] = array(
          '#type' => 'select',
          '#title' => 'Priority',
          '#options' => $priority,
          '#weight' => 6,
          '#multiple' => $multiple = FALSE,
          '#required' => $required = TRUE,
        );
        /*
          $form['attachment'] = array(
          '#title' => t('Upload file'),
          '#type' => 'managed_file',
          '#upload_validators' => array('file_validate_extensions' => array('jpeg jpg png gif zip txt doc docx xls xlsx pdf')),
          '#weight' => 7,
          '#upload_location' => 'public://files//' . 'tickets',
          );
         */

        $form['assignee'] = array(
          '#type' => 'select',
          '#title' => t('Assignee'),
          '#options' => $assignee,
          '#weight' => 9,
          '#required' => TRUE,
        );

        $form['submit'] = array(
          '#type' => 'submit',
          '#value' => 'Create',
          '#weight' => 10,
        );
    }

    $form['upload'] = [
      '#markup' => '<br/><br/><b>Upload Attachment:</b>',
      '#weight' => 8,
    ];

    //print_r($form);
    //drupal_set_message($form);

    $form['attachment'] = array(
      '#title' => t(''),
      '#type' => 'managed_file',
      '#upload_validators' => array('file_validate_extensions' => array('jpeg jpg png gif zip txt doc docx xls xlsx pdf')),
      '#weight' => 8,
      '#upload_location' => 'public://files//' . 'tickets',
      '#suffix' => '</div>',
    );


    return $form;
}

function tickets_form_submit($form, &$form_state) {
    //drupal_set_message('inside submit');

    if (arg(1) == 'new-ticket') {
        drupal_set_message("Form has been submitted");
        global $user;
        $node = new stdClass();
        $node->type = 'ticket'; //machine name of created content type.
        //$node->title = $form_state['values']['name'];
        $node->promote = 0;
        $node->language = 'und';
        $node->status = 0;
        $node->uid = $user->uid;
        node_save($node);

        if (($form_state['values']['attachment']) !== 0) {
            $file = file_load($form_state['values']['attachment']);
            $file->status = FILE_STATUS_PERMANENT;
            file_save($file);
            $fid = $form_state['values']['attachment'];
            drupal_set_message('file id : - ' . $fid);

            $uri = $file->uri;
            drupal_Set_message('uri :- ' . $uri);
            $url = file_create_url($file->uri);
            drupal_set_message('url : - ' . $url);

            /*
             *   Inserting file path in database
             */

            db_update('tickets')
                ->fields(array(
                  'attachment' => $uri,
                ))
                ->condition('nid', $node->nid)
                ->execute();
        }
    }
    //For updating file path of exisiting ticket
    $uri = '';
    $nid = arg(3);
    drupal_set_message("nid:-" . $nid);
    drupal_set_message("arg(4):=" . arg(4));
    if ($uri == "") {
        $result = db_query("SELECT attachment from {tickets} WHERE nid='" . $nid . "'");

        foreach ($result as $value) {
            $uri = $value->attachment;
        }
    }

    if (arg(4) == 'edit') {
        //$node_id = arg(3);
        if (($form_state['values']['attachment']) !== 0) {
            $file = file_load($form_state['values']['attachment']);
            $file->status = FILE_STATUS_PERMANENT;
            file_save($file);
            $fid = $form_state['values']['attachment'];
            drupal_set_message('file id : - ' . $fid);

            $uri = $file->uri;
            drupal_Set_message('uri :- ' . $uri);
            $url = file_create_url($file->uri);
            drupal_set_message('url : - ' . $url);

            /*
             *   Inserting file path into database
             */

            db_update('tickets')
                ->fields(array(
                  'attachment' => $uri,
                ))
                ->condition('nid', $nid)
                ->execute();
        }

        /*
         * Updating status and ticket information in database
         */

        db_update('tickets')
            ->fields(array(
              'status' => 0,
            ))
            ->condition('nid', $nid)
            ->execute();

        $get_pid = db_query("SELECT pid FROM project WHERE project ='" . $_POST['project'] . "'");
        foreach ($get_pid as $value) {
            $pid = $value->pid;
        }

        db_insert('tickets')
            ->fields(array(
              'nid' => $nid,
              'pid' => $pid,
              'project' => $_POST['project'],
              'ticket_status' => $_POST['status_show'],
              'issue_type' => $_POST['issue_type'],
              'summary' => $_POST['ticket_summary'],
              'reporter' => $_POST['reporter'],
              'description' => $_POST['ticket_description'],
              'priority' => $_POST['priority'],
              'assignee' => $_POST['assignee'],
              'attachment' => $uri,
              'status' => 1,
            ))
            ->execute();

        drupal_set_message(t('Ticket has been updated...!'));

        $url = '../' . '?page=' . arg(5);
        drupal_goto($url, array('external' => TRUE));
    }

    $url = 'assigned/view-all' . '?page=1';
    drupal_goto($url, array('external' => TRUE));
}

function tickets_form_validate($form, &$form_state) {
    //drupal_set_message('inside validate');
    // drupal_set_message($_POST['reporter']);
    // drupal_set_message($_POST['assignee']);
    // if ($_POST['reporter'] == '-Select-' || $_POST['assignee'] == "-Select-") {
    //     form_set_error('hi', 'Reporter and Assignee cannot be same!');
    // }
}

function tickets_autocomplete($string = '') {
    $matches = array();
    // Select rows that match the string
    if ($string) {
        $items = array_map('trim', explode(' ', $string));
        $last_item = array_pop($items);
        $prefix = implode(' ', $items);

        $result = db_select('role')->fields('role', array('name'))->condition('name', db_like($last_item) . '%', 'LIKE')->range(0, 10)->execute();
        foreach ($result as $role) {
            if (!in_array($role->name, $items)) {
                $value = !empty($prefix) ? $prefix . ' ' . $role->name : $role->name;
                $matches[$value] = check_plain($value);
            }
        }
    }
    drupal_json_output($matches);
}

/*
 *  Implements hook_node_insert
 */

function tickets_node_insert($node) {
    drupal_set_message($node->nid);
    drupal_set_message($_POST['project']);
    drupal_set_message($_POST['priority']);
    drupal_set_message($_POST['issue_type']);

    // For inserting ticket data into database
    if (arg(1) == 'new-ticket') {
        /*
         * Inserting data into database
         */

        $get_pid = db_query("SELECT pid FROM project WHERE project ='" . $_POST['project'] . "'");
        foreach ($get_pid as $value) {
            $pid = $value->pid;
        }
        db_insert('tickets')
            ->fields(array(
              'nid' => $node->nid,
              'pid' => $pid,
              'project' => $_POST['project'],
              'ticket_status' => '<span style="color:white; background-color:#4A6785;">TO DO</span>',
              'issue_type' => $_POST['issue_type'],
              'summary' => $_POST['ticket_summary'],
              'reporter' => $_POST['reporter'],
              'description' => $_POST['ticket_description'],
              'priority' => $_POST['priority'],
              'assignee' => $_POST['assignee'],
              'status' => 1,
            ))
            ->execute();

        drupal_set_message(t('Ticket has been created...!'));
    }
    return $node;
}

function tickets_list() {

    $role = $GLOBALS['role'];
    $pid = $_SESSION['pid'];

    if ($role == 'anonymous user') {
        $url = '../user/login';
        drupal_goto($url, array('external' => TRUE));
    }

    if ($pid == '') {
        //To redirect to select page when user does not selects any project
        drupal_get_messages('error');
        if (arg(3) == "") {
            $url = '../../project/select';
        }
        else {
            $url = '../../../project/select';
        }

        drupal_goto($url, array('external' => TRUE));
    }

    $user = $GLOBALS['user']->name;
    $output = '';
    $summary = '';
    $query = '';
    $nid = '';
    $i = 0;
    $count = 0;
    $get_ra = arg(1);

    /*
      $result = db_select('tickets', 'count_tickets')
      ->fields('count_tickets')
      ->execute();
      $num_of_tickets = $result->rowCount();
     */

    if ($role == 'administrator') {
        //When role is administrator
        if ($get_ra == 'resolved') {
            $ticket_info = "SELECT * FROM tickets WHERE status = '2' and pid ='" . $pid . "'";
        }
        else {
            $ticket_info = "SELECT * FROM tickets WHERE status = '1' and pid ='" . $pid . "'";
        }

        //drupal_set_message($query);
    }
    else if ($get_ra == 'assigned') {
        //When role is not an administrator and assigned tickets
        $ticket_info = "SELECT * from tickets WHERE status = '1' and assignee = '" . $user . "'" . " and pid ='" . $pid . "'";
        //$result_data = db_query($ticket_info);
    }
    else if ($get_ra == 'reported') {
        //When role is not an administrator and reported tickets
        $ticket_info = "SELECT * from tickets WHERE status = '1' and reporter = '" . $user . "'" . " and pid ='" . $pid . "'";
        //$result_data = db_query($ticket_info);
    }
    else if ($get_ra == 'resolved') {
        //When role is not an administrator and reported tickets
        $ticket_info = "SELECT * from tickets WHERE status = '2' and pid ='" . $pid . "'";
        //$result_data = db_query($ticket_info);
    }
    else {
        $url = '../../../project/select';
        drupal_goto($url, array('external' => TRUE));
    }


    $_SESSION['ticket_info'] = $ticket_info;
    $temp = $ticket_info;
    //$_SESSION['result_data'] = $result_data;
    //use another session variable to get limit
    $apply_form = drupal_get_form('filter_apply_form', $ticket_info);

    $output['filters'] = [
      //class='col-md-8' 
      '#prefix' => "<div class='col-md-10'><div style='padding-left:16px; padding-top:30px;'>",
      '#markup' => drupal_render($apply_form),
      '#suffix' => '</div></div>',
    ];

    //$per_page = 5;
    //$_SESSION['per_page'] = $per_page;
    $pagination = filter_apply_form_submit();
    //$pagination = get_pagination($per_page, $ticket_info);

    $output['pagination'] = [
      //'#markup' => '</div></div><div class="col-md-2"></div><div class="col-md-5 pagination">'.'&nbsp'.drupal_render($pagination).'</div>',
      //'#prefix' => '</div><div class="row col-md-4"></div><div class="row col-md-5 pagination" style="padding-left:0px;">' . '&nbsp',
      '#prefix' => '<div class=" pagination" style="padding-top:10px;">' . '&nbsp',
      //'#markup' => drupal_render($pagination),
      '#suffix' => '</div>',
        //'#weight' => 100,
    ];

    $output['div'] = array(
      //height: 600px; overflow:auto;
      '#markup' => '<div id="tickets-list" class= "col-md-2" style="background-color:la1vender; " >',
    );

    $output['break'] = [
      '#markup' => '</br>',
    ];

    //$ticket_info = $_SESSION['ticket_info'];
    //drupal_set_message('after filter:- '.$ticket_info);
    if (isset($_SESSION['priority_filter'])) {
        $ticket_info.= $_SESSION['priority_filter'];
        drupal_set_message('after priority filter:- ' . $_SESSION['priority_filter']);
    }
    if (!(isset($_SESSION['priority']))) {
        //$ticket_info = $temp;
    }

    if (isset($_SESSION['status_filter'])) {
        //if(isset($_SESSION['status'])) {
        $ticket_info.= $_SESSION['status_filter'];
        drupal_set_message('after status filter:- ' . $_SESSION['status_filter']);
        //}
    }

    if (isset($_SESSION['type_filter'])) {

        $ticket_info.= $_SESSION['type_filter'];
        drupal_set_message('after type filter:- ' . $_SESSION['type_filter']);
    }

    $per_page_limit = "";

    drupal_set_message('print query :- ' . $ticket_info);

    $per_page_limit = $_SESSION['per_page_limit'];
    $result_data = db_query($ticket_info . $per_page_limit);

    foreach ($result_data as $record) {
        $summary = $record->summary;
        $nid = $record->nid;
        $status = $record->ticket_status;

        $output['summary' . $i] = array(
          '#markup' => $summary,
          '#prefix' => '<b>Summary:</b><br/>',
        );

        $output['status' . $i] = array(
          '#markup' => $status,
          '#prefix' => '<br/><b>Status:</b>',
        );

        //$nid = $node_id[$i];
        $output['read_more' . $i] = array(
          '#prefix' => '<br/>',
          '#markup' => l('Read More', 'ticket/' . $get_ra . '/view-all/' . $nid, array('query' => array('page' => $_GET['page']))),
          '#suffix' => '</b><br/><hr>',
        );

        $i++;
        $count ++;
    }
    //drupal_set_message('count:- ' . $count);

    /*
      //To edit ticket details
      if (arg(4) == 'edit1') {
      $edit_ticket = drupal_get_form('tickets_form', 'edit');

      $output['div_end'] = array(
      //height:600px; overflow
      //border-left: thick solid #ff0000;
      '#markup' => '</div><div class ="col-md-5" style=" background-color:la1venderblush; " >',
      );

      $output['view_ticket'] = array(
      //'#markup' => drupal_render($edit_ticket),
      '#suffix' => '</div>',
      );
      }
      else
     */
    //{
    $output['div_end'] = array(
      //border-left: thick solid #ff0000;
      '#markup' => '</div><div id="ticket-details" class ="col-md-6" style="background-color:la1venderblush; " >',
    );

    $get_nid = arg(3);
    drupal_set_message(arg(4));

    if ($get_nid == "") {
        $view_ticket = tickets_view(0);
        //$output ='';         
    }
    else {
        $view_ticket = tickets_view($get_nid);
    }

    $output['view_ticket'] = array(
      '#markup' => drupal_render($view_ticket),
      '#suffix' => '</div>',
    );

    $people = get_people($get_nid);
    if ((arg(3) != "") && ($people != "")) {
        $output['div_user'] = [
          '#prefix' => '<div class ="col-md-2" style=" background-color:la1venderblush;">',
          '#markup' => '<h3>People</h3>',
        ];

        $output['users'] = [
          '#prefix' => '',
          '#markup' => drupal_render($people),
          '#suffix' => '</div>',
        ];
    }
    // }
    //When no ticket is assigned or to a user
    if (($count == 0) && $get_ra == 'assigned') {
        $output['display'] = array(
          '#markup' => '</div><h2><div class ="col-md-5" ><br/>No tickets assigned<div></h2>',
        );
        return $output;
    }
    else if (($count == 0) && $get_ra == 'reported') {
        $output['display'] = array(
          '#markup' => '</div><h2><div class ="col-md-5" ><br/>No tickets reported<div></h2>',
        );
        return $output;
    }
    else if (($count == 0) && $get_ra == 'resolved') {
        $output['display'] = array(
          '#markup' => '</div><h2><div class ="col-md-5" ><br/>No tickets resolved<div></h2>',
        );
        return $output;
    }
    else {
        return $output;
    }
}

function filter_apply_form($form, &$form_state, $ticket_info) {

    $priority_default = ['Low' => 'Low', 'Medium' => 'Medium', 'High' => 'High'];
    if (isset($_SESSION['priority'])) {
        $priority_default = $_SESSION['priority'];
    }

    $priority_options = ['Low' => 'Low', 'Medium' => 'Medium', 'High' => 'High'];
    $form['priority'] = array(
      //'#prefix'
      //'#prefix' => '<div class=" col-md-1">',
      '#type' => 'select', '#title' => t('Priority: '),
      '#options' => $priority_options,
      '#default_value' => $priority_default,
      '#multiple' => TRUE,
      //'#required' => TRUE,
      '#suffix' => '&nbsp&nbsp&nbsp&nbsp',
    );


    if (arg(1) == 'resolved') {
        $status_options = ['Done' => 'Done'];

        $status_default = $status_options;
        if (isset($_SESSION['status'])) {
            $status_default = $_SESSION['status'];
        }

        $form['status'] = array(
          // '#prefix' => '<div class=" col-md-3">',
          //'#prefix' => '<div class="filter-menu">',
          '#type' => 'select',
          '#title' => t('Status:'),
          '#options' => $status_options,
          '#default_value' => $status_default,
          //'#multiple' => TRUE,
          //'#required' => TRUE,
          // '#suffix' => '</div>',
          '#suffix' => '&nbsp&nbsp&nbsp&nbsp',
        );
    }
    else {
        $status_options = ['To Do' => 'To Do', 'In Progress' => 'In Progress'];

        $status_default = $status_options;
        if (isset($_SESSION['status'])) {
            $status_default = $_SESSION['status'];
        }

        $form['status'] = array(
          // '#prefix' => '<div class=" col-md-3">',
          //'#prefix' => '<div class="filter-menu">',
          '#type' => 'select',
          '#title' => t('Status:'),
          '#options' => $status_options,
          '#default_value' => $status_default,
          '#multiple' => TRUE,
          //'#required' => TRUE,
          // '#suffix' => '</div>',
          '#suffix' => '&nbsp&nbsp&nbsp&nbsp',
        );
    }

    $type_default = ['Bug' => 'Bug', 'Issue' => 'Issue', 'Ticket' => 'Ticket'];
    if (isset($_SESSION['type'])) {
        $type_default = $_SESSION['type'];
    }

    $type_options = ['Bug' => 'Bug', 'Issue' => 'Issue', 'Ticket' => 'Ticket'];
    $form['type'] = array(
      // '#prefix' => '<div class=" col-md-3">',
      '#type' => 'select',
      '#title' => t('Issue Type:'),
      '#options' => $type_options,
      '#default_value' => $type_default,
      '#multiple' => TRUE,
      //'#required' => TRUE,
      '#suffix' => '&nbsp&nbsp&nbsp&nbsp',
        //'#suffix' => '</div>',
    );


    //$per_page = 5;

    $per_page_default = ['5' => '5'];
    if (isset($_SESSION['per_page'])) {
        //$per_page_default = [];
        $per_page_default = $_SESSION['per_page'];
    }

    $per_page = ['1' => '1', '2' => '2', '3' => '3', '5' => '5', '10' => '10', '1000' => 'All'];
    $form['per_page'] = array(
      //'#prefix' => '<div class=" col-md-2">',
      '#type' => 'select',
      '#title' => t('Tickets Per Page:'),
      '#options' => $per_page,
      '#default_value' => $per_page_default,
      '#multiple' => FALSE,
      '#suffix' => '&nbsp&nbsp&nbsp&nbsp',
        //'#required' => TRUE,
        //'#suffix' => '</div>',
    );

    $form['apply'] = [
      //'#prefix' => '<div class=" col-md-1" >',
      '#type' => 'submit',
      '#value' => 'Apply',
        //'#submit' => array('get_pagination',$per_page,$ticket_info),
        //'get_pagination($per_page, $ticket_info)',
        //'#suffix' => ,
    ];

    $form['arg'] = [
      '#type' => 'hidden',
      '#value' => 'arg',
    ];

    return $form;
}

function filter_apply_form_submit() {

    if (isset($_POST['per_page'])) {
        $per_page = $_POST['per_page'];

        $_SESSION['per_page'] = $per_page;
    }
    else if (isset($_SESSION['per_page'])) {
        $per_page = $_SESSION['per_page'];
    }
    else {
        $per_page = 5;
    }

    if (isset($_POST['arg'])) {

        $ticket_info = $_SESSION['ticket_info'];

        //To apply priority filter
        if (isset($_POST['priority'])) {
            $priority_filter = '';
            $priority_filter.=' and (';
            $count = 0;
            // count($_POST['priority']);

            foreach ($_POST['priority'] as $value) {
                $count++;
                //drupal_set_message($value);
                //drupal_set_message($count);
                if ($count == count($_POST['priority'])) {
                    $priority_filter.='priority=' . "'" . $value . "' )";
                }
                else {
                    $priority_filter.='priority=' . "'" . $value . "'" . ' or ';
                }
            }
            $ticket_info.= $priority_filter;
            $_SESSION['priority_filter'] = $priority_filter;
            $_SESSION['priority'] = $_POST['priority'];
        }

        //To apply status filter
        if (isset($_POST['status'])) {
            //$ticket_info = "";
            drupal_set_message('in status');
            //$ticket_info = $_SESSION['ticket_info'];
            //$status_options = ['<span style="color:white; 
            //background-color:#4A6785;">TO DO</span>' => 'To Do', 
            //'<span style="color:black; background-color:#FFD351;">IN PROGRESS</span>' => 'In Progress'];
            $status_filter = '';
            $count = 0;
            $temp = '';

            if (arg(1) == 'resolved') {
                if ($_POST['status'] == 'Done') {
                    $temp = '<span style="color:white; background-color:#14892C;">DONE</span>';
                }
                $status_filter.=' and ticket_status=' . "'" . $temp . "'";
            }
            else {
                $status_filter.=' and (';
                foreach ($_POST['status'] as $value) {
                    $count++;
                    drupal_set_message($value);
                    if ($value == 'To Do') {
                        $temp = '<span style="color:white; background-color:#4A6785;">TO DO</span>';
                    }
                    if ($value == 'In Progress') {
                        $temp = '<span style="color:black; background-color:#FFD351;">IN PROGRESS</span>';
                    }

                    //drupal_set_message($count);
                    if ($count == count($_POST['status'])) {
                        $status_filter.='ticket_status=' . "'" . $temp . "' )";
                    }
                    else {
                        $status_filter.='ticket_status=' . "'" . $temp . "'" . ' or ';
                    }
                }
            }

            $ticket_info.= $status_filter;
            $_SESSION['status_filter'] = $status_filter;
            $_SESSION['status'] = $_POST['status'];
            //$output = "";
            //return $output;
        }

        //To apply type filter
        if (isset($_POST['type'])) {
            //$ticket_info = "";
            drupal_set_message('type');
            //$ticket_info = $_SESSION['ticket_info'];
            $type_filter = '';
            $type_filter.=' and (';
            $count = 0;

            foreach ($_POST['type'] as $value) {
                $count++;
                drupal_set_message($value);
                //drupal_set_message($count);
                if ($count == count($_POST['type'])) {
                    $type_filter.='issue_type=' . "'" . $value . "' )";
                }
                else {
                    $type_filter.='issue_type=' . "'" . $value . "'" . ' or ';
                }
            }
            $ticket_info.= $type_filter;
            $_SESSION['type_filter'] = $type_filter;
            $_SESSION['type'] = $_POST['type'];
            //$output = "";
            //return $output;
        }


        drupal_set_message('arg :- ' . $ticket_info);
        $result_rows = db_query($ticket_info);
        $num_rows = $result_rows->rowCount();
        drupal_set_message('num_rows:- ' . $num_rows);
        $_SESSION['num_rows'] = $num_rows;
        //$_SESSION['ticket_info'] =  
        //$ticket_info;
        $link = '?page=1';
        drupal_goto($link, array('external' => TRUE));
    }
    else {
        //----------------pagination start-------------------------//
        $get_ra = arg(1);
        $ticket_info = $_SESSION['ticket_info'];
        //drupal_set_message('else:- ' . $ticket_info);
        //start position
        //no. of tickets per page
        //$per_page = 1;
        //current page
        if (!isset($_GET['page'])) {
            $page = 1;
        }
        else {
            $page = $_GET['page'];
        }
        //$page = 1;

        if ($page <= 1) {
            //when we don't have get page
            $start = 0;
        }
        else {
            $start = ($page * $per_page) - $per_page;
        }

        if (isset($_SESSION['num_rows'])) {
            $num_rows = $_SESSION['num_rows'];
        }
        else {
            $result_rows = db_query($ticket_info);
            $num_rows = $result_rows->rowCount();
        }


        $per_page_limit = " LIMIT $start,$per_page";
        //$ticket_info.= " LIMIT $start,$per_page";
        // }
        //drupal_set_message('pagination 2:- ' . $ticket_info);

        $_SESSION['per_page_limit'] = $per_page_limit;
        //$_SESSION['ticket_info'] = $ticket_info;
        //drupal_set_message('max records:- ' . $num_rows);
        $num_pages = ceil($num_rows / $per_page);

        //When all tickets fit in a single page
        if ($num_pages == 1 || $num_pages == 0) {
            $output = "";
            return $output;
        }



        //Prev , numbers , next links
        $prev = $page - 1;
        $next = $page + 1;

        //if (arg(4) != "edit") {
        if ($prev > 0) {
            $output['prev'] = array(
              //height: 600px; overflow:auto;
              'prefix' => '<ul >',
              //'#markup' => "<a href='?page=$prev'>prev</a>",
              '#markup' => '<li>' . l('prev', 'ticket/' . $get_ra . '/view-all', array('query' => array('page' => $prev,))) . '</li>',
            );
        }
        else {
            $output['prev'] = array(
              //height: 600px; overflow:auto;
              'prefix' => '<ul >',
              //'#markup' => "<a href='?page=$prev'>prev</a>",
              '#markup' => '<li class="disabled">' . l('prev', 'ticket/' . $get_ra . '/view-all', array('query' => array('page' => 1,))) . '</li>',
            );
        }

        //numbers 
        $number = 1;
        $count = 0;
        $number = $_GET['page'];
        //drupal_set_message($number);
        if ($number > 2) {
            $number = $number - 2;
        }
        else if ($number == 2) {
            $number = $number - 1;
        }

        for ($number; $number <= $num_pages; $number++) {
            $count ++;

            if ($page == $number) {
                $output['number'] = array(
                  //'#markup' => "<li class='active'>[$number]</li>",
                  '#markup' => "<li class='active'>" . l($number, 'ticket/' . $get_ra . '/view-all', array('query' => array('page' => $number,))) . "</li>",
                    //'#markup' => l('prev',array('query'=>array('page'=>$prev))),
                );
            }
            else {
                $output['number' . $number] = array(
                  '#markup' => '<li>' . l("$number", 'ticket/' . $get_ra . '/view-all', array('query' => array('page' => $number,))) . '</li>',
                    //'#markup' => "<a href='?page=$number'>$number</a>",
                );
            }
            if ($count == 5) {
                break;
            }
        }

        if ($page < $num_pages) {
            $output['next'] = array(
              //'#markup' => "<a href='?page=$next'>next</a>",
              '#markup' => '<li>' . l("next", 'ticket/' . $get_ra . '/view-all', array('query' => array('page' => $next,))) . '</li>',
              //'#markup' => l('next', "ticket/assigned/view-all?page=$next"),
              '#suffix' => '</ul>',
            );
        }
        else {
            $output['next'] = array(
              //'#markup' => "<a href='?page=$next'>next</a>",
              '#markup' => '<li class="disabled">' . l("next", 'ticket/' . $get_ra . '/view-all', array('query' => array('page' => $num_pages,))) . '</li>',
              //'#markup' => l('next', "ticket/assigned/view-all?page=$next"),
              '#suffix' => '</ul>',
            );
        }

        $output['div_pagination_end'] = [
            //'#markup' => '</div>',
        ];


        //----------------pagination end-------------------------//
        return $output;
    }
}

function get_people($nid) {
    $pid = $_SESSION['pid'];
    $query = "SELECT * FROM {tickets} WHERE nid = '" . $nid . "'" . " and pid ='" . $pid . "'";
    //drupal_set_message($query);
    $result_data = db_query($query);

    $assignee = '';
    $reporter = '';
    foreach ($result_data as $value) {
        $assignee = $value->assignee;
        $reporter = $value->reporter;
    }

    if ($assignee == '') {
        return $output = "";
    }

    $div = '<div class="row col-md-12">';

    $get_ra = arg(1);
    $node = arg(3);
    $edit_people = arg(4);
    if ($edit_people == 'edit-user') {
        $form = drupal_get_form('people_edit_form', $reporter, $assignee);
        $output['form'] = [
          '#markup' => '<div class="row col-md-11">' . drupal_render($form) . '</div>',
        ];
    }
    else {

        $output['edit_people'] = [
          '#markup' => $div . '<div class="edit-ticket btn btn-default col-md-2" style="padding-right:35px;">' . l("Edit", 'ticket/' . $get_ra . '/view-all/' . $node . '/edit-user', array('query' => array('page' => $_GET['page']))) . '</div></div>',
        ];

        $output['reporter'] = [
          '#prefix' => $div . '<div class="row col-md-9"><b>Reporter:</b></div>',
          '#markup' => '<div class="row col-md-3">' . $reporter . '</div></div>',
        ];
        $output['assignee'] = [
          '#prefix' => $div . '<div class="row col-md-9"><b>Assignee:</b></div>',
          //'#markup' => '',
          '#markup' => '<div class="row col-md-3">' . $assignee . '</div></div>',
        ];
    }

    return $output;
}

function people_edit_form($form, &$form_state, $prev_reporter, $prev_assignee) {

    $query_people = "select name from project_users where pid = " . "'" . $_SESSION['pid'] . "'";
    //drupal_set_message($q);
    $result = db_query($query_people);

    foreach ($result as $value) {
        $reporter[$value->name] = $value->name;
        //  drupal_set_message($value->name);
        $assignee[$value->name] = $value->name;
        //drupal_set_message
    }

    $form['reporter'] = array(
      '#type' => 'select',
      '#title' => t('Reporter'),
      '#default_value' => $prev_reporter,
      '#options' => $reporter,
      '#weight' => 1,
      '#required' => TRUE,
    );

    $form['assignee'] = array(
      '#type' => 'select',
      '#title' => t('Assignee'),
      '#default_value' => $prev_assignee,
      '#options' => $assignee,
      '#weight' => 2,
      '#required' => TRUE,
    );

    $form['update_people'] = [
      '#type' => 'submit',
      '#value' => 'Update',
      '#weight' => 3,
    ];

    if (arg(4) == 'edit-user') {
        drupal_set_message('edit-user:- ' . arg(4));
        return $form;
    }
}

function people_edit_form_submit() {

    drupal_set_message('people_edit_form_submit()');
    $nid = arg(3);

    db_update('tickets')
        ->fields(array(
          'assignee' => $_POST['assignee'],
          'reporter' => $_POST['reporter'],
        ))
        ->condition('nid', $nid)
        ->execute();

    $url = '../' . $nid . '?page=' . $_GET['page'];
    drupal_goto($url, array('external' => TRUE));
}

function tickets_view($args) {

    $role = $GLOBALS['role'];
    if ($role == 'anonymous user') {
        $url = '../../user/login';
        drupal_goto($url, array('external' => TRUE));
    }

    $output = "";
    $nid = $args;
    //drupal_set_message('tickets_view nid:- '.$nid);

    if ($nid == '0') {
        return $output;
    }

    $pid = $_SESSION['pid'];
    // drupal_set_message('tickets_view pid:- '.$pid);

    if ($pid == '') {
        //drupal_get_messages('error');
        $url = '../../../../project/select';
        drupal_goto($url, array('external' => TRUE));
    }

    $query = "SELECT * FROM {tickets} WHERE nid = '" . $nid . "'" . " and pid ='" . $pid . "'";
    //drupal_set_message($query);
    $result_data = db_query($query);
    $node = $nid;

    foreach ($result_data as $record) {
        $tid = $record->tid;
        $project = $record->project;
        $status = $record->ticket_status;
        $issue_type = $record->issue_type;
        $summary = $record->summary;
        //$reporter = $record->reporter;
        //$assignee = $record->assignee;
        $description = $record->description;
        $priority = $record->priority;
        $attachment = $record->attachment;

        $output['project' . $node] = array(
          '#markup' => $project,
          '#prefix' => '<h3>',
          '#suffix' => '</h3>',
          '#weight' => -2,
        );

        $output['summary' . $node] = array(
          '#markup' => $summary,
          //'#prefix' => '<b>Summary:</b><br/>',
          '#suffix' => '<br/>',
          '#weight' => -1,
        );

        $output['div_buttons'] = [
            // '#markup' => '<div class=" col-md-12">',
        ];

        //gets assigned or reported
        $get_ra = arg(1);
        if ($get_ra == 'resolved') {
            //don't show edit button in resolved issues
        }
        else {
            $page = $_GET['page'];

            $output['edit' . $node] = array(
              //btn btn-default edit-ticket         
              '#prefix' => '<br/><div class="col-md-1 btn btn-default edit-ticket">',
              //'#markup' => "<a href='$node/edit?page=$page'>Edit</a>",
              '#markup' => l('Edit', 'ticket/' . $get_ra . '/view-all/' . $node . '/edit/' . $page),
              '#suffix' => '</div>',
              '#weight' => 0,
            );
        }
        $page = $_GET['page'];
        $output['delete' . $node] = array(
          // btn btn-default delete-ticket
          '#prefix' => '<div class="col-md-1 btn btn-danger delete-ticket" style="padding-right:50px;">',
          '#value' => 'Delete',
          '#markup' => l('Delete', '/ticket/' . $get_ra . '/delete/' . $node . '/' . $tid, array('query' => array('page' => $page,))),
          '#suffix' => '</div>',
          '#weight' => 1,
        );

        $status_form = drupal_get_form('status_form');

        $output['status' . $node] = array(
          '#markup' => drupal_render($status_form),
          //'#suffix' => '</div>',
          '#weight' => 2,
        );

        $output['div_buttons_end'] = [
            //'#markup' => '</div>',
        ];

        $output['details' . $node] = array(
          //'#markup' => $nbsp . $nbsp . $issue_type,
          //'#prefix' => '<h3>Details</h3>',
          '#markup' => '<h3>Details</h3>',
          '#weight' => 3,
            //'#suffix' => '<br/>',
        );

        $div12 = '<div class="row col-md-12">';
        $div6 = '<div class="row col-md-6">';

        /*
          $output['reporter'] = [
          '#prefix' => $div . '<div class="row col-md-6"><b>Reporter:</b></div>',
          '#markup' => '<div class="row col-md-6">' . $reporter . '</div></div>',
          ];


          $output['assignee'] = [
          '#prefix' => $div . '<div class="row col-md-6"><b>Assignee:</b></div>',
          //'#markup' => '',
          '#markup' => '<div class="row col-md-6">' . $assignee . '</div></div>',
          ];
         */

        $output['issue_type' . $node] = array(
          '#prefix' => $div12 . $div6 . '<div class="row col-md-6"><b>Type:</b></div>',
          '#markup' => '<div class="row col-md-6">' . $issue_type . '</div></div>',
          '#weight' => 4,
        );

        $output['status_show' . $node] = array(
          '#prefix' => $div6 . '<div class="row col-md-6"><b>Status:</b></div>',
          '#markup' => '<div class="row col-md-6">' . $status . '</div></div></div>',
          '#weight' => 5,
        );

        $output['priority' . $node] = array(
          '#prefix' => $div12 . $div6 . '<div class="row col-md-6"><b>Priority:</b></div>',
          '#markup' => '<div class="row col-md-6">' . $priority . '</div></div></div>',
          '#weight' => 6,
        );

        if (!empty($description)) {
            $output['description' . $node] = array(
              '#markup' => '<pre class="pre-scrollable">' . $description . '</pre>',
              '#prefix' => '<br/><br/><br/><br/><b>Description:</b><br/>',
              '#weight' => 7,
            );
        }

        if (!empty($attachment)) {
            $file_name = substr($attachment, 24);
            $link = '/drupal7/sites/default/files/files/tickets/' . $file_name;

            $output['attachment' . $node] = array(
              '#markup' => '<a href =' . "$link " . 'download>' . $file_name . '</a>',
              '#prefix' => '<br/><b>Attachment:</b><br/>',
              '#weight' => 8,
            );
        }


        //To print previous comments
        $subject = '';
        $comment = '';

        $result_comment = db_query("SELECT * from tickets_comment WHERE nid='" . $node . "'");
        $get_user = '';
        $comment_user = '';
        /*
          if ($result_comment == '') {
          $output['no_comment'] = array(
          '#prefix' => '<b>',
          '#markup' => 'No Comments',
          '#suffix' => '</b>',
          '#weight' => 11,
          );
          break;
          }
         */

        $number_of_comments = $result_comment->rowCount();
        if ($number_of_comments == '0') {
            
        }
        else {
            $output['title_comments'] = array(
              '#prefix' => '<h3>',
              '#markup' => 'Comments',
              '#suffix' => '</h3>',
              '#weight' => 11,
            );
            //To get previous comments
            foreach ($result_comment as $value) {
                //$nid = $value->nid;
                // drupal_set_message();
                $subject = $value->subject;
                $comment = $value->comment;
                $cid = $value->cid;
                $created = $value->created;
                $changed = $value->changed;
                $uid = $value->uid;

                //To get user name from uid
                $get_user = db_query("SELECT name from users WHERE uid='" . $uid . "'");
                foreach ($get_user as $value) {
                    $comment_user = $value->name;
                }

                if ($changed == '') {
                    //When a comment is not updated
                    $output['tickets_comments' . $cid] = array(
                      '#prefix' => '<pre>',
                      '#markup' => $comment_user . ' - ' . date('d/m/Y h:i a', $created) . '<b><br/>' . $subject . '</b><br/>' .
                      $comment . '<br/><b>' . l('delete', 'ticket/' . $get_ra . '/comment/delete/' . $node . '/' . $cid, array('query' => array('page' => $_GET['page']))) . ' ' .
                      l('edit', 'ticket/' . $get_ra . '/view-all/' . $node . '/' . $cid, array('query' => array('page' => $_GET['page']))) . '</b>',
                      '#suffix' => '</pre>',
                      '#weight' => 12,
                    );
                    $output['edit' . $cid] = array(
                      '#prefix' => '<b>',
                      //'#markup' => l('edit',''),
                      '#suffix' => '</b>',
                      '#weight' => 13,
                    );
                }
                else {
                    //When a comment is updated
                    $output['tickets_comments' . $cid] = array(
                      '#prefix' => '<pre>',
                      '#markup' => $comment_user . ' - ' . date('d/m/Y h:i a', $created) . '          Last modified by:- ' . $comment_user . ' - ' . date('d/m/Y h:i a', $changed) . '<b><br/>' . $subject . '</b><br/>' .
                      $comment . '<br/><b>' . l('delete', 'ticket/' . $get_ra . '/comment/delete/' . $node . '/' . $cid, array('query' => array('page' => $_GET['page']))) . ' ' .
                      l('edit', 'ticket/' . $get_ra . '/view-all/' . $node . '/' . $cid, array('query' => array('page' => $_GET['page']))) . '</b>',
                      '#suffix' => '</pre>',
                      '#weight' => 12,
                    );
                    $output['edit' . $cid] = array(
                      '#prefix' => '<b>',
                      //'#markup' => l('edit',''),
                      '#suffix' => '</b>',
                      '#weight' => 13,
                    );
                }
            }
        }

        //drupal_set_message($result_comment->rowCount());
        //to get tickets_Comment_form
        $form = drupal_get_form('tickets_comment_form', $node);

        // To render tickets comment form

        $output['tickets_comment'] = array(
          '#markup' => drupal_render($form),
          '#weight' => 12,
            //'#suffix' => '</div>',
            //'#suffix' => '</div>',
        );
    }

    /*
      if ($output == '') {
      drupal_get_messages('error');
      $url = '../../project/select';
      // drupal_goto($url, array('external' => TRUE));
      }
     */

    return $output;
}

function status_form($form, &$form_state) {

    $form['to_do'] = array(
      //'#prefix'=>'<span id="edit-ticket-1">',
      //'#type' => '<div class="">submit</div>',
      '#type' => 'submit',
      '#value' => 'To Do',
      //'#weight' => -10,
      '#submit' => array('to_do_submit'),
        //#suffix' => '</span>',
    );

    $form['in_progress'] = array(
      //'#type' => '<div class="">submit</div>',
      '#type' => 'submit',
      '#value' => 'In Progress',
      //'#weight' => -10,
      '#submit' => array('in_progress_submit'),
    );

    $form['done'] = array(
      //'#type' => '<div class="">submit</div>',
      '#type' => 'submit',
      '#value' => 'Done',
      //'#weight' => -10,
      '#submit' => array('done_submit'),
        //'#suffix' => '</div>',
    );

    return $form;
}

function to_do_submit() {
    $nid = arg(3);
    drupal_set_message($nid);
    db_update('tickets')
        ->fields(array(#FFD351
          'ticket_status' => '<span style="color:white; background-color:#4A6785;">TO DO</span>',
          'status' => 1,
        ))
        ->condition('nid', $nid)
        ->execute();
    $url = '../view-all' . '?page=' . $_GET['page'];
    drupal_goto($url, array('external' => TRUE));
}

function in_progress_submit() {
    $nid = arg(3);
    drupal_set_message($nid);
    db_update('tickets')
        ->fields(array(#4A6785
          'ticket_status' => '<span style="color:black; background-color:#FFD351;">IN PROGRESS</span>',
          'status' => 1,
        ))
        ->condition('nid', $nid)
        ->execute();
    $url = '../view-all' . '?page=' . $_GET['page'];
    drupal_goto($url, array('external' => TRUE));
}

function done_submit() {
    $nid = arg(3);
    drupal_set_message($nid);
    db_update('tickets')
        ->fields(array(
          'ticket_status' => '<span style="color:white; background-color:#14892C;">DONE</span>',
          'status' => 2,
        ))
        ->condition('nid', $nid)
        ->execute();
    $url = '../view-all' . '?page=' . $_GET['page'];
    drupal_goto($url, array('external' => TRUE));
}

function tickets_delete_form($form, &$form_state, $ra, $node) {

    $role = $GLOBALS['role'];
    if ($role == 'anonymous user') {
        $url = '../../user/login';
        drupal_goto($url, array('external' => TRUE));
    }

    drupal_set_message("ra:- " . $ra);
    $tid = arg(4);


    //$node = arg(3);
    drupal_set_message('ticket delete <br/> node:- ' . $node . '  tid:- ' . $tid);
    //$_SESSION['']
    $db_pid = '';

    $get_pid = db_query("SELECT pid FROM tickets WHERE nid='" . $node . "' and tid='" . $tid . "'");
    foreach ($get_pid as $value) {
        $db_pid = $value->pid;
    }

    //drupal_set_message('SESSION_pid:- '.$_SESSION['pid']);
    //drupal_set_message('db_pid:- '.$db_pid);

    if ($_SESSION['pid'] != $db_pid) {
        $url = '../../view-all';
        drupal_set_message($url);
        drupal_goto($url, array('external' => TRUE));
    }

    $form['warn'] = array(
      '#markup' => '<div class="col-md-8"><h2>Are you sure you want to delete this ticket?</h2>',
    );
    $form['warn_2'] = array(
      '#markup' => 'This action cannot be undone.<br/>',
    );
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => 'Delete',
    );
    $form['cancel'] = array(
      '#prefix' => '&nbsp&nbsp',
      '#markup' => '' . l('Cancel', "ticket/$ra/view-all/" . $node, array('query' => array('page' => $_GET['page'],))),
      '#value' => 'cancel',
      '#suffix' => '</div>',
    );
    return $form;
}

function tickets_delete_form_submit() {
    $nid = arg(3);
    drupal_set_message('delete:- ' . $nid);
    db_update('tickets')
        ->fields(array(
          'status' => 0,
        ))
        ->condition('nid', $nid)
        ->execute();
    drupal_set_message('Ticket deleted successfully');
    $url = '../../view-all' . '?page=' . $_GET['page'];
    drupal_goto($url, array('external' => TRUE));
}

function select_form() {

    $role = $GLOBALS['role'];
    $projects = '';
    $result_project = '';
    if ($role == 'anonymous user') {
        $url = '../user/login';
        drupal_goto($url, array('external' => TRUE));
    }

    //style="border: 1px solid green ; height:100%;"
    //$div = '<div class = "boxed col-md-4" >';
    $output['div_start'] = [
      // '#prefix' =>'<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"></script>',
      '#markup' => '',
    ];

    $output['div_welcome'] = [
      //'#prefix' => '<h3>Welcome to Ticket Manager</h3>',
      '#markup' => '<div id="select_form" class="col-md-10 col-md-offset-2"><h3>Welcome to Ticket Manager</h3>',
    ];

    $pid = $_SESSION['pid'];
    if ($pid == '') {
        drupal_get_messages('error');
        $output['error'] = [
          '#markup' => '<h4>Please Select a project to continue..</h4>',
        ];
        return $output;
    }

    if ($role == 'administrator') {
        //$result_project = db_query("SELECT project from project WHERE uid='" . $_SESSION['uid'] . "' ORDER BY PROJECT");
        // foreach ($result_project as $value) {
        //    $projects[$value->project] = $value->project;
        $query = "SELECT * FROM {tickets} WHERE status = '1' and pid ='" . $pid . "'";
        $result_data = db_query($query);
    }
    else {
        //$uid = $_SESSION['uid'];
        $user = $GLOBALS['user']->name;
        //drupal_set_message($user);
        $ticket_info = "SELECT * from tickets WHERE status = '1' and assignee = '" . $user . "'" . " and pid ='" . $pid . "'";
        $result_data = db_query($ticket_info);
    }
    $i = 0;
    $count = 0;

    $br = '&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp';
    $output['headings'] = [
        // '#markup' => '<div class="headings"><b>Summary'.$br.'Priority'.$br.'Status<br/></b>',
    ];

    foreach ($result_data as $record) {
        // $project = $record->project;
        // $issue_type = $record->issue_type;
        $summary = $record->summary;
        $nid = $record->nid;
        $status = $record->ticket_status;
        //drupal_set_message('tickets_list() $nid:- ' . $nid);
        //$assignee = $record->assignee;
        //$priority = $record->priority;

        $output['summary' . $i] = array(
            // '#markup' => $summary,
            //'#prefix' => '<b>Summary:</b><br/>',
            // '#weight' => 2,
        );

        $output['status' . $i] = array(
            //'#markup' => $status,
            //'#prefix' => '<br/><b>Status:</b>',
            // '#weight' => 2,
        );

        //$nid = $node_id[$i];
        /*
          $output['read_more' . $i] = array(
          '#prefix' => '<br/>',
          '#markup' => l('Read More', 'ticket/' . $get_ra . '/view-all/' . $nid),
          '#suffix' => '</b><br/><hr>',
          ); */

        $i++;
        $count ++;
    }

    $output['headings_end'] = [
      '#prefix' => 'You have ' . $count . ' ticket assigments',
      '#markup' => '</div>',
    ];

    drupal_set_message($pid);
    //When role is not an administrator and assigned tickets
    //}
    //global $base_path;
    //$path = $base_path . 'sites/default/files/pictures/picture-21.png';
    //drupal_set_message($path);
    /*
      if ($pid == '') {
      drupal_get_messages('error');
      $form['project'] = array(
      //'#type' => 'select',
      '#type' => 'hidden',
      '#title' => t('Select Project'),
      '#options' => $projects,
      '#weight' => 1,
      // '#attributes' => array('readonly' => 'readonly'),
      '#required' => TRUE,
      );

      $form['submit'] = array(
      //'#type' => 'submit',
      '#type' => 'hidden',
      '#value' => 'Submit',
      '#weight' => 2,
      );
      }
      else {
      drupal_set_message($_SESSION['project']);
      $form['project'] = array(
      //'#type' => 'select',
      '#type' => 'hidden',
      '#title' => t('Select Project'),
      '#default_value' => $_SESSION['project'],
      '#options' => $projects,
      '#weight' => 1,
      // '#attributes' => array('readonly' => 'readonly'),
      '#required' => TRUE,
      );

      $form['submit'] = array(
      //'#type' => 'submit',
      '#type' => 'hidden',
      '#value' => 'Submit',
      '#weight' => 2,
      );
      /*
      $form['image'] = array(
      '#markup' => theme("image", array(
      'path' => $path . "",
      'width' => "200",
      'height' => "200",
      //  '#weight' => 4,
      ))
      // '#weight' => 4,
      );
     */
    // }
    // }
    //else 
    //  {
    drupal_set_message($role);
    /*
     *  When role is not administrator
     */
    //$uid = $_SESSION['uid'];
    /*
      $pid = $_SESSION['pid'];

      $query_project = "SELECT distinct(project) FROM project_users,users_access WHERE "
      . "project_users.uid = users_access.uid and users_access.uid ='" . $_SESSION['uid'] . "' ORDER BY PROJECT";

      $result_project = db_query($query_project);
      foreach ($result_project as $value) {
      $projects[$value->project] = $value->project;
      }

      if ($projects == '') {
      $form['no_project_assigned'] = array(
      '#markup' => 'No Projects Assigned',
      '#weight' => 1,
      );
      return $form;
      }


      //When no project is selected
      if ($pid == '') {
      drupal_get_messages('error');
      $form['project'] = array(
      '#type' => 'select',
      '#title' => t('Select Project'),
      '#options' => $projects,
      '#weight' => 1,
      // '#attributes' => array('readonly' => 'readonly'),
      '#required' => TRUE,
      );

      $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Submit',
      '#weight' => 2,
      );
      }
      else {
      drupal_set_message($_SESSION['project']);
      $form['project'] = array(
      '#type' => 'select',
      '#title' => t('Select Project'),
      '#default_value' => $_SESSION['project'],
      '#options' => $projects,
      '#weight' => 1,
      // '#attributes' => array('readonly' => 'readonly'),
      '#required' => TRUE,
      );

      $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Submit',
      '#weight' => 2,
      );
      }

     */
    // }

    return $output;
}

function select_form_submit() {
    //drupal_set_message('inside submit');

    $project_name = $_POST['project'];
    //drupal_set_message($project_name);

    $get_pid = db_query("SELECT pid FROM project WHERE project ='" . $project_name . "'");
    foreach ($get_pid as $value) {
        $pid = $value->pid;
    }

    $_SESSION['pid'] = $pid;
    $_SESSION['project'] = $project_name;
    $url = '../project/select-project';
    //drupal_goto($url, array('external' => TRUE));
    //, 'query' => array('id' => $pid)));
}

function project_form($form, &$form_state) {

    $role = $GLOBALS['role'];
    //$user = $GLOBALS[''];
    if ($role == 'anonymous user') {
        $url = '../user/login';
        drupal_goto($url, array('external' => TRUE));
    }

    $div = '<div class = "col-md-2" ></div><div id="project_form" class = "col-md-5">';
    $form['div_start'] = [
      '#markup' => $div,
    ];

    if ($role == 'administrator') {
        $form['project'] = array(
          '#type' => 'textfield',
          '#title' => t('Project Name'),
          // '#value' => $reporter, 
          '#size' => 60, '#maxlength' => 128,
          '#weight' => 1,
          //'#autocomplete_path' =>'user/autocomplete',
          '#required' => TRUE,
        );

        $form['project_description'] = array(
          '#type' => 'textarea',
          '#title' => t('Description'),
          //'#value' => $description, 
          '#size' => 60, '#maxlength' => 128,
          '#weight' => 2,
          //'#autocomplete_path' =>'user/autocomplete',
          '#required' => FALSE,
          '#weight' => 2,
        );

        /*
          $form['roles'] = array(
          '#title' => t('Select Roles'),
          '#type' => 'textfield',
          // '#description' => t('Select the roles for.'),
          '#autocomplete_path' => 'role/autocomplete',
          '#multiple' => TRUE,
          '#weight' => 3,
          );
         */

        $form['submit'] = array(
          '#type' => 'submit',
          '#value' => 'Create',
          '#weight' => 3,
        );
    }
    else {
        $form['not_authorized'] = array(
          '#markup' => '<b>You are not authorized to view this page</b>',
          '#weight' => 1,
        );
    }

    // drupal_set_message($GLOBALS['role']);
    return $form;
}

function project_form_validate($form, &$form_state) {

    $project = $_POST['project'];
    //$db_user = $_POST['user'];
    $get_project = db_query("SELECT project from project where project='" . $project . "'");
    $db_project = '';
    foreach ($get_project as $value) {
        $db_project = $value->project;
        if ($project == $db_project) {
            break;
        }
    }

    if ($project == $db_project) {
        //'Project with name:- '.
        form_set_error('error', '<b>' . $project . '</b>' . ' already exists, please change the name of the project.');
    }
}

function project_form_submit() {
    //drupal_set_message('hi');
    $project = $_POST['project'];
    $project_description = $_POST['project_description'];
    //$roles = $_POST['roles'];
    drupal_set_message($project);
    drupal_set_message($project_description);
    //drupal_set_message($role);

    $user = $GLOBALS['user']->name;
    drupal_set_message($user);

    db_insert('project')
        ->fields(array(
          'project' => $project,
          'description' => $project_description,
          'uid' => $_SESSION['uid'],
            // 'roles' => $role,
            // 'rid' => $role_id,
            //'extra' => $node->extra,
        ))
        ->execute();
}

function project_select_form($form, &$form_state) {
    //drupal_set_message('inside select');

    $role = $GLOBALS['role'];
    $uid = $_SESSION['uid'];
    $pid = $_SESSION['pid'];
    $project = '';
    //$user_name = $GLOBALS['user']->name;
    //drupal_set_message('session uid:- ' . $_SESSION["uid"]);
    //drupal_set_message('session role:- ' . $_SESSION["role"]);

    if ($role == 'anonymous user') {
        $url = '../user/login';
        drupal_goto($url, array('external' => TRUE));
    }

    if ($pid == '') {
        $url = '../project/select';
        drupal_get_messages('error');
        drupal_goto($url, array('external' => TRUE));
    }

    $user_access = '';
    $result_access = db_query("SELECT distinct(access),name FROM project_users,users_access WHERE "
        . "project_users.uid = users_access.uid and users_access.uid ='" . $uid . "' and users_access.pid = '" . $pid . "'");
    foreach ($result_access as $value) {
        $user_access = $value->access;
    }

    /*
     *  Redirect to view-all page if user has view_all access 
     */

    //drupal_set_message($user_access);

    if ($user_access == 'view_all') {
        $url = '../ticket/assigned/view-all';
        drupal_goto($url, array('external' => TRUE));
        //, 'query' => array('id' => $pid)));
    }

    /*
      $result = db_query("SELECT distinct(access),name,project_users.project FROM project_users,users_access "
      . "WHERE project_users.uid = users_access.uid and project_users.pid = users_access.pid and name ='" . $user_name . "'");

      foreach ($result as $record) {
      $projects[$record->project] = t($record->project);
      $access[$record->access] = t($record->access);
      }
     */

    $div = '<div id="project-select-form" class = "col-md-2" ></div><div id="project-select-form" class="col-md-3" >';
    $form['div_start'] = [
      '#markup' => $div,
    ];


    $result = db_query("SELECT project from {project} WHERE pid='" . $pid . "'" . "ORDER BY PROJECT");
    foreach ($result as $record) {
        $project = t($record->project);
    }
    /*
     *  If logged in user is admin
     */
    if ($role == 'administrator') {

        $form['project'] = array(
          '#type' => 'textfield',
          '#title' => t('Selected Project'),
          '#weight' => 1,
          '#value' => $_SESSION['project'],
          //'#value' => $project,
          //'#options' => $projects,
          '#attributes' => array('readonly' => 'readonly'),
          '#required' => TRUE,
        );


        $form['submit'] = array(
          '#type' => 'submit',
          '#value' => 'Create Ticket',
          '#weight' => 2,
        );

        $form['add_user'] = array(
          '#type' => 'submit',
          //'#prefix'=> '<div class="btn btn-info">',
          //'#suffix'=> '</div>',
          '#value' => 'Add User',
          '#weight' => 3,
          '#submit' => array('project_select_form_add_user'),
        );

        $form['view_tickets'] = array(
          '#type' => 'submit',
          '#value' => 'View Tickets',
          '#weight' => 4,
          '#submit' => array('project_select_form_view_tickets'),
        );
    }
    /*
     *  If no project is assigned to logged in user
     */
    else if ($project == '') {
        $form['no_project_assigned'] = array(
          '#markup' => 'No Project Assigned',
          '#weight' => 1,
        );
    }
    else {
        $form['project'] = array(
          '#type' => 'textfield',
          '#title' => t('Selected Project'),
          '#weight' => 1,
          '#value' => $project,
          //'#options' => $projects,
          '#attributes' => array('readonly' => 'readonly'),
          '#required' => TRUE,
        );


        $form['submit'] = array(
          '#type' => 'submit',
          '#value' => 'Create Ticket',
          '#weight' => 2,
            /*
              '#states' => array(
              // Only show this field when the value of type is sell.
              'invisible' => array(
              ':input[name="project"]' => array('value' => 'Project 3'),
              ),
              ),
             */
        );

        $form['view_tickets'] = array(
          '#type' => 'submit',
          '#value' => 'View Tickets',
          '#weight' => 4,
          '#submit' => array('project_select_form_view_tickets'),
        );

        $form['add_user'] = array(
          '#type' => 'submit',
          '#value' => 'Add User',
          '#weight' => 3,
          '#submit' => array('project_select_form_add_user'),
        );
    }
    // drupal_set_message($GLOBALS['role']);
    return $form;
}

function project_select_form_view_tickets() {
    //   if($_POST['submit1']=='select'){
    //$pid = $_SESSION['pid'];
    $url = '../ticket/assigned/view-all';
    drupal_goto($url, array('external' => TRUE));
    //, 'query' => array('id' => $pid)));
    //}
}

function project_select_form_submit() {
    //drupal_set_message('inside submit');

    $project_name = $_POST['project'];

    $pid = $_SESSION['pid'];
    /*
      $get_pid = db_query("SELECT pid FROM project WHERE project ='" . $project_name . "'");
      foreach ($get_pid as $value) {
      $pid = $value->pid;
      }
     */
    $url = '../ticket/new-ticket';
    drupal_goto($url, array('external' => TRUE));
}

function project_select_form_add_user() {
    //drupal_set_message('inside submit');
    $project_name = $_POST['project'];
    $result = db_query("SELECT pid from {project} where project ='" . $project_name . "'");
    foreach ($result as $record) {
        $pid = $record->pid;
    }
    $url = '../project/add-users/';
    drupal_goto($url, array('external' => TRUE));
}

function add_users_form($form, &$form_state) {

    $role = $GLOBALS['role'];
    $user = $GLOBALS['user']->name;
    $project = '';
    $uid = $_SESSION['uid'];

    if ($role == 'anonymous user') {
        $url = '../user/login';
        drupal_goto($url, array('external' => TRUE));
    }


    //$error = 'Always throw this error';
    $pid = $_SESSION['pid'];
    if ($pid == '') {

        /*
         *  To clear drupal error messages
         */
        drupal_get_messages('error');
        $url = '/drupal7/project/select-project';
        drupal_goto($url, array('external' => TRUE));
    }


    $div = '<div class = "col-md-2" ></div><div id="add_users_form" class = "col-md-3">';
    $form['div_start'] = [
      '#markup' => $div,
    ];

    $result = db_query("SELECT project from {project} WHERE pid = '" . $pid . "'" . " ORDER BY PROJECT");

    foreach ($result as $record) {
        // $options[$record->project] = t($record->project);
        $project = $record->project;
        // $db_pid = $record->pid;
    }

    /*
      if ($pid != $db_pid) {
      $form['not_authorized'] = array(
      '#markup' => '<b>You are not authorized to view this page</b>',
      '#weight' => 1,
      );
      return $form;
      }
     */
    $access = '';
    $db_access = db_query("SELECT access FROM users_access WHERE uid='" . $uid . "' and pid='" . $pid . "'");
    foreach ($db_access as $value) {
        $access = $value->access;
    }
    drupal_set_message($access);
    if ($access == 'view_all') {
        $form['view_all'] = array(
          //'#type' => 'textfield',
          '#markup' => "You don't have access to this page",
            //'#prefix' => '<br/>',
            //'#suffix' => '</b><br/>',
        );
        return $form;
    }


    $form['project'] = array(
      '#type' => 'textfield',
      '#title' => t('Selected Project'),
      '#value' => $project,
      //'#autocomplete_path' =>'user/autocomplete',
      '#required' => TRUE,
      '#attributes' => array('readonly' => 'readonly'),
    );


    $form['user'] = array(
      '#type' => 'textfield',
      '#title' => t('Add Users'),
      '#autocomplete_path' => 'user/autocomplete',
      '#required' => TRUE,
    );

    $user_access = array('view_all' => 'view_all', 'access_all' => 'access_all', 'mod' => 'mod');
    $form['users_access'] = array(
      '#type' => 'select',
      '#title' => t('User access'),
      '#options' => $user_access,
      '#required' => FALSE,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Add',
        // '#weight' => 2,
    );

    $form['break'] = array(
      //'#type' => 'textfield',
      '#markup' => '',
      '#prefix' => '<br/>',
      '#suffix' => '</b><br/>',
    );

    $user = '';

    $get_user = db_query("SELECT distinct(project_users.uid),name,access FROM project_users,users_access WHERE "
        . "project_users.pid = users_access.pid and project_users.uid = users_access.uid and project_users.pid ='" . $pid . "'")->fetchAll();

    foreach ($get_user as $value) {
        $user = $value->name;
        $uid = $value->uid;
        $users_access = $value->access;

        //drupal_set_message($user);
        if (!empty($user)) {
            $space = '&nbsp&nbsp&nbsp&nbsp';
            $form['output' . $user] = array(
              //'#type' => 'textfield',
              '#markup' => $user,
              '#prefix' => '<b>',
                //'#suffix' => '</b>',
                //'#weight' => 3 + $i,
            );

            $form['users_access' . $user] = array(
              //'#type' => 'textfield',
              '#markup' => $users_access,
              '#prefix' => $space . $space,
                //'#suffix' => '</b>',
                //'#weight' => 3 + $i,
            );

            $form['delete' . $uid] = array(
              //'#type' => 'textfield',
              '#markup' => l('remove', 'project/delete-user/' . $uid),
              // '<a href="../project/delete-user/' . $uid . '">Remove</a>',
              '#prefix' => $space . $space . '<b>',
              '#suffix' => '</b><br/>',
                //'#weight' => 3 + $i,
            );
        }
    }
    //drupal_set_message('inside add users');
    return $form;
}

function add_users_form_validate($form, &$form_state) {

    $project = $_POST['project'];
    $user = $_POST['user'];
    $user_exixts = 'FALSE';

    $get_user = db_query("SELECT name from project_users where project='" . $project . "'");
    $db_user = '';
    foreach ($get_user as $value) {
        $db_user = $value->name;
        if ($user == $db_user) {
            break;
        }
    }

    if ($db_user == $user) {
        form_set_error('error', $user . ' is already added to the project');
    }

    $check_user = db_query("SELECT name from users");
    foreach ($check_user as $value) {
        $db_user = $value->name;
        //drupal_set_message($db_user);
        if ($user == $db_user) {
            $user_exixts = 'TRUE';
        }
    }

    /*
     *  If a user is not added to the users table
     */
    if ($user_exixts == "FALSE") {
        form_set_error('error', $user . " can't be added to the project");
    }
}

function add_users_form_submit() {

    $user = $_POST['user'];
    $project = $_POST['project'];
    $uid = '';

    //$uid = $_SESSION['uid'];

    $q = "SELECT uid FROM users WHERE name = " . "'" . $user . "'";
    $get_uid = db_query($q);
    foreach ($get_uid as $value) {
        $uid = $value->uid;
    }

    //drupal_set_message($project);

    $get_pid = db_query("SELECT pid from project where project='" . $project . "'");
    foreach ($get_pid as $value) {
        $pid = $value->pid;
    }

    db_insert('project_users')
        ->fields(array(
          'uid' => $uid,
          'pid' => $pid,
          'project' => $project,
          'name' => $user,
        ))
        ->execute();

    db_insert('users_access')
        ->fields(array(
          'uid' => $uid,
          'pid' => $pid,
          'access' => $_POST['users_access'],
        ))
        ->execute();
}

function delete_user($uid) {
    $role = $GLOBALS['role'];

    if ($role == 'anonymous user') {
        $url = '../user/login';
        drupal_goto($url, array('external' => TRUE));
    }

    $pid = $_SESSION['pid'];
    $get_uid = db_query("SELECT uid,name,project from project_users where uid='" . $uid . "'");
    foreach ($get_uid as $value) {
        $uid = $value->uid;
        $user_name = $value->name;
        $project = $value->project;
    }

    /*
     *  To delete a user from project_users
     */

    $delete_user = "DELETE FROM project_users WHERE pid = '" . $pid . "'" . " and name = '" . $user_name . "'";
    drupal_set_message($delete_user);

    db_query($delete_user);

    /*
     *  To delete a user from users_access
     */

    db_query("DELETE FROM users_access WHERE uid = '" . $uid . "'" . " and pid = '" . $pid . "'");

    drupal_set_message("Deleted " . $user_name . " from " . $project);

    return drupal_goto('../add-users', array('external' => TRUE));
    //, 'query' => array('id' => $pid)));
}

function users_autocomplete($string = '') {
    $matches = array();
    // Select rows that match the string
    if ($string) {
        $items = array_map('trim', explode(' ', $string));
        $last_item = array_pop($items);
        $prefix = implode(' ', $items);

        $result = db_select('users')->fields('users', array('name'))->condition('name', db_like($last_item) . '%', 'LIKE')->range(0, 10)->execute();
        foreach ($result as $role) {
            if (!in_array($role->name, $items)) {
                $value = !empty($prefix) ? $prefix . ' ' . $role->name : $role->name;
                $matches[$value] = check_plain($value);
            }
        }
    }
    drupal_json_output($matches);
}

function get_projects($select) {
    drupal_get_messages('error');
    $options = '';
    $role = $GLOBALS['role'];
    $projects = '';
    if ($role == 'administrator') {
        //$pid = $_SESSION['pid'];
        $result_project = db_query("SELECT project from project WHERE uid='" . $_SESSION['uid'] . "' ORDER BY PROJECT");
        foreach ($result_project as $value) {
            $projects[$value->project] = $value->project;
        }
        $options.= '<option value = "select">' . '<b> -Select- </b>' . '</option>';
        while (list($k, $v) = each($projects)) {
            if ($select == $v) {
                //drupal_set_message('v:- ' . $v);
                $options.= '<option value = "' . $v . '" selected>' . $k . '</option>';
            }
            else {
                $options.= '<option value = "' . $v . '">' . $k . '</option>';
            }
        }
    }
    else {

        /*
         *  When role is not administrator
         */
        $uid = $_SESSION['uid'];
        //$pid = '';

        $query_project = "SELECT distinct(project) FROM project_users,users_access WHERE "
            . "project_users.uid = users_access.uid and users_access.uid ='" . $uid . "' ORDER BY PROJECT";
        //drupal_set_message($query_project);
        $result_project = db_query($query_project);
        foreach ($result_project as $value) {
            $projects[$value->project] = $value->project;
        }
        $options.= '<option value = "select">' . '<b> -Select- </b>' . '</option>';
        while (list($k, $v) = each($projects)) {
            if ($select == $v) {
                //drupal_set_message('v:- ' . $v);
                $options.= '<option value = "' . $v . '" selected>' . $k . '</option>';
            }
            else {
                $options.= '<option value = "' . $v . '">' . $k . '</option>';
            }
        }
    }
    return $options;
}

if (isset($_POST['project'])) {
    $selected = $_POST['project'];
    $pid = "";
    //drupal_set_message('selected:- ' . $selected);
    $_SESSION['project'] = $selected;

    $get_pid = db_query("SELECT pid FROM project WHERE project ='" . $selected . "'");
    foreach ($get_pid as $value) {
        $pid = $value->pid;
    }

    $_SESSION['pid'] = $pid;
    //drupal_get_messages('error');
}
